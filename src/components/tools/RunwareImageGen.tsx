import { useMemo, useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';
import { RunwareService } from '@/utils/RunwareService';

const RUNWARE_KEY = 'runware_api_key';

export const RunwareImageGen = () => {
  const { toast } = useToast();
  const [apiKey, setApiKey] = useState(localStorage.getItem(RUNWARE_KEY) || '');
  const [prompt, setPrompt] = useState('A futuristic cityscape at dusk, cinematic lighting, ultra-detailed');
  const [isLoading, setIsLoading] = useState(false);
  const [imageUrl, setImageUrl] = useState<string | null>(null);

  const client = useMemo(() => (apiKey ? new RunwareService(apiKey) : null), [apiKey]);

  const saveKey = () => {
    localStorage.setItem(RUNWARE_KEY, apiKey);
    toast({ title: 'API key saved' });
  };

  const generate = async () => {
    if (!client) {
      toast({ title: 'Missing API key', description: 'Add your Runware API key', variant: 'destructive' });
      return;
    }
    setIsLoading(true);
    try {
      const result = await client.generateImage({ positivePrompt: prompt });
      setImageUrl(result.imageURL);
      toast({ title: 'Image ready' });
    } catch (e) {
      toast({ title: 'Error', description: 'Failed to generate image', variant: 'destructive' });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card className="glass-surface elevated-shadow">
      <CardHeader>
        <CardTitle>AI Image Generator</CardTitle>
        <CardDescription>Powered by Runware (bring your API key)</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid md:grid-cols-[1fr_auto] gap-2">
          <Input placeholder="Runware API Key" value={apiKey} onChange={(e) => setApiKey(e.target.value)} />
          <Button variant="outline" onClick={saveKey} disabled={!apiKey}>Save Key</Button>
        </div>
        <div className="space-y-2">
          <label className="text-sm font-medium">Prompt</label>
          <Textarea rows={4} value={prompt} onChange={(e) => setPrompt(e.target.value)} />
        </div>
        <div className="flex gap-2">
          <Button onClick={generate} disabled={isLoading} variant="hero">
            {isLoading ? 'Generatingâ€¦' : 'Generate Image'}
          </Button>
        </div>
        {imageUrl && (
          <div className="mt-4 rounded-lg overflow-hidden border">
            {/* eslint-disable-next-line @next/next/no-img-element */}
            <img src={imageUrl} alt="Generated by AI" className="w-full h-auto" />
          </div>
        )}
      </CardContent>
    </Card>
  );
};
